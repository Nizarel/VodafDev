# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: User JAVA CICD

env:
  poi_path: apis/user-java/**
  registry: openhackgitacr.azurecr.io
  repository: user-java
  docker_path: apis/user-java
  web_app: openhackgituserjava
  staging_app: staging
  staging_url: https://openhackgituserjava-staging.azurewebsites.net/api/healthcheck/user-java
  prod_url: https://openhackgituserjava.azurewebsites.net/api/healthcheck/user-java
  resource_group: openhackgitrg
  build_name: user-java
  api_name: user-java


on:
  push:
    branches: [ master ]
    paths: 
      - apis/user-java/**  
      - .github/workflows/user-java.yml
  pull_request:
    branches: [ master ]
    paths: 
      - apis/user-java/**
      - .github/workflows/user-java.yml


jobs:
  build_and_test:

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: apis/user-java    


    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package #--file apis/user-java/pom.xml
    - name: Run Unit Tests
      run: mvn test #--file apis/user-java/pom.xml

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  docker_build_and_push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build_and_test
    steps:
    
    - uses: actions/checkout@v2
    
    - name: 'Login to ACR'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USER }}
        password: ${{ secrets.ACR_KEY }}

    - name: Docker build
      run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path

    - name: Docker Push
      run: docker push $registry/$repository:${{github.run_number}}
    
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  deploy_staging_api:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: docker_build_and_push
    steps:
    
    - uses: actions/checkout@v2

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 'Login to ACR'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USER }}
        password: ${{ secrets.ACR_KEY }}

    - name: 'Deploy to Azure API App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.web_app }}
        slot-name: ${{ env.staging_app }}
        images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}

    # - name: Update Azure API Management Services
    #   uses: kipriz/update-azure-api-management@v1
    #   with:
    #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
    #     resourceGroup: ${{ env.resource_group }}
    #     serviceName: ${{ env.api_name }} # Name of API in API Management
    #     apiName: ${{ env.api_name }} # API Name. Pick it up from tracing request when you open a specific API in "API Management Services" -> APIS 
    #     authorization: ${{ secrets.APIM_SAS }}  # authorization from "API Management Services" -> "Management API"  
    #     apiPath: "portal_prod" # API path 
    #     openApiLink: ${{ env.staging_url }} # Public link to OpenApi file. Should correspond to the format specified in "format" param.
    #     format: "openapi+json-link" # Optional. Format of OpenApi file. Default is openapi+json-link , other options is on: https://docs.microsoft.com/en-us/rest/api/apimanagement/2020-06-01-preview/apis/createorupdate#contentformat
    #     versionOfApiManagement: ${{ steps.date.outputs.date }} # Optional. Azure's Management API version. Default is "2020-06-01-preview"


    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  validate_staging_api:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: deploy_staging_api
    steps:    
    - uses: actions/checkout@v2

    - name: Check Staging App  
      uses: srt32/uptime@v0.2.1
      with:
        url-to-hit: ${{ env.staging_url }}
        expected-statuses: "200"
    
    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.2.0
      with:
        token: ${{secrets.GITHUB_TOKEN}}
        target: ${{ env.staging_url }}

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  swap_slots:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: validate_staging_api
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap staging to production
      run: | 
        az webapp deployment slot swap --name ${{ env.web_app }} --resource-group ${{ env.resource_group }} --slot ${{ env.staging_app }} --target-slot production
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  validate_production_api:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: swap_slots
    steps:
    - uses: actions/checkout@v2

    - name: Check Staging App  
      uses: srt32/uptime@v0.2.1
      with:
        url-to-hit: ${{ env.prod_url }}
        expected-statuses: "200"
        
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  roll_back:
    if: failure()
    runs-on: ubuntu-latest
    needs: validate_production_api
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap production and staging
      run: |
        az webapp deployment slot swap --name ${{ env.web_app }} --resource-group ${{ env.resource_group }} --slot ${{ env.staging_app }} --target-slot production 
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

