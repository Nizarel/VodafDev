name: POI CICD
env:
  poi_path: apis/poi/**
  registry: openhack8acr.azurecr.io
  repository: poi
  docker_path: apis/poi/web
  staging_env: openhack8poi-uat
  prod_url: https://openhack8poi.azurewebsites.net
  resource_group: openhack8rg
  webapp_name: openhack8poi
  build_name: POI

on:
  push:
    branches: [ master ]
    paths: 
      - apis/poi/**  
      - .github/workflows/poi.yml
  pull_request:
    branches: [ master ]
    paths: 
      - apis/poi/**
      - .github/workflows/poi.yml

jobs:
  # build_and_test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: Setup .NET Core
  #     uses: actions/setup-dotnet@v1

  #   - name: Add Code Coverage Tools
  #     working-directory: apis/poi/tests/UnitTests
  #     run: dotnet add package coverlet.msbuild

  #   - name: Install dependencies
  #     run: dotnet restore apis/poi/web/*.csproj
      
  #   - name: .NET Build Web
  #     run: dotnet build --configuration Release --no-restore apis/poi/web/*.csproj

  #   - name: .NET Build Unit Tests
  #     run: dotnet build --configuration Release apis/poi/tests/UnitTests/UnitTests.csproj

  #   - name: .NET Test
  #     run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov
      
  #   - name: Coveralls
  #     uses: coverallsapp/github-action@master
  #     with:
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #       path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
  #       base-path: apis/poi
  #       flag-name: Unit
        
  #   - uses: actions/github-script@0.9.0
  #     if: failure()
  #     with:
  #       github-token: ${{secrets.GITHUB_TOKEN}}
  #       script: |
  #         let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
  #         github.issues.create({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
  #           body: body
  #         });

  docker_build_and_push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    # needs: build_and_test
    steps:
    
    - uses: actions/checkout@v2

    # - name: Azure authentication
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 'Login to ACR'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USER }}
        password: ${{ secrets.ACR_KEY }}

    - name: Docker build
      run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path

    - name: Docker Push
      run: docker push $registry/$repository:${{github.run_number}}
    
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
 
  deploy_webapp:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: docker_build_and_push
    steps:
    
    - uses: actions/checkout@v2

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 'Login to ACR'
      uses: azure/docker-login@v1
      with:
        login-server: $registry
        username: ${{ secrets.ACR_USER }}
        password: ${{ secrets.ACR_KEY }}

    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: $staging_env
        images: $registry/$repository:${{github.run_number}}

    # https://docs.microsoft.com/en-us/azure/container-instances/container-instances-github-action